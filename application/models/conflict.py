# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401
from application.models.base_model_ import Model
from application.util import util


class Conflict(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, from_id: int, to_id: int, distance: float):  # noqa: E501
        """Conflict - a model defined in Swagger
        """
        self.swagger_types = {
            'from_id': int,
            'to_id': int,
            'distance': float
        }

        self.attribute_map = {
            'from_id': 'from_id',
            'to_id': 'to_id',
            'distance': 'distance'
        }

        self._from_id = from_id
        self._to_id = to_id
        self._distance = distance

    @classmethod
    def from_dict(cls, dikt) -> 'Vote':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Request of this Request.  # noqa: E501
        :rtype: Request
        """
        return Vote(dikt["stakeholder_id"], dikt["rating"], dikt["weight"], dikt["confidence"])

    @property
    def from_id(self) -> int:
        """Gets the id of the first stakeholder involved in the conflict.


        :return: The id of the first stakeholder.
        :rtype: int
        """
        return self._from_id

    @from_id.setter
    def from_id(self, from_id: int):
        """Sets the id of the first stakeholder involved in the conflict.


        :param from_id: The id of the first stakeholder.
        :type from_id: int
        """

        self._from_id = from_id

    @property
    def to_id(self) -> int:
        """Gets the id of the second stakeholder involved in the conflict.


        :return: The id of the second stakeholder.
        :rtype: int
        """
        return self._to_id

    @to_id.setter
    def to_id(self, to_id: int):
        """Sets the id of the second stakeholder involved in the conflict.


        :param to_id: The id of the second stakeholder.
        :type to_id: int
        """

        self._to_id = to_id

    @property
    def distance(self) -> int:
        """Gets the distance of the conflict.


        :return: The distance.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance: float):
        """Sets the distance of the conflict.


        :param distance: The distance of the conflict.
        :type distance: float
        """

        self._distance = distance
