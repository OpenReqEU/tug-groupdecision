# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401
from application.models.base_model_ import Model
from application.util import util
from application.models.vote import Vote


class Request(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, votes: List[Vote], aggregation_function: str="WEIGHTED_AVG"):  # noqa: E501
        """Requirement - a model defined in Swagger

        :param votes: The list of votes.  # noqa: E501
        :type votes: List[Vote]
        :param aggregation_function: The aggregation function to be used for the computation of the utility value.  # noqa: E501
        :type aggregation_function: str
        """
        self.swagger_types = {
            'votes': List[Vote],
            'aggregation_function': str
        }

        self.attribute_map = {
            'votes': 'votes',
            'aggregation_function': 'aggregation_function'
        }

        self._votes = votes
        self._aggregation_function = aggregation_function

    @classmethod
    def from_dict(cls, dikt) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Request of this Request.  # noqa: E501
        :rtype: Request
        """
        return Request(list(map(lambda v_dikt: Vote.from_dict(v_dikt), dikt["votes"])), dikt["aggregation_function"])

    @property
    def votes(self) -> List[Vote]:
        """Gets the id of this Requirement.


        :return: The id of this Requirement.
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes: List[Vote]):
        """Sets the votes of this request.


        :param votes: The votes of this request.
        :type votes: List[Vote]
        """

        self._votes = votes

    @property
    def aggregation_function(self) -> str:
        """Gets the aggregation function to be used for the computation of the utility value.


        :return: The aggregation function.
        :rtype: str
        """
        return self._aggregation_function

    @aggregation_function.setter
    def aggregation_function(self, aggregation_function: str):
        """Sets the aggregation function.


        :param aggregation_function: The aggregation function to be used for the computation of the utility value.
        :type aggregation_function: str
        """

        self._aggregation_function = aggregation_function

